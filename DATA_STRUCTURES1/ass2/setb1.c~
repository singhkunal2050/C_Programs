/*READ DATA FROM EMPLOYEE.txt and sort on age using Merge sort */
#include<stdio.h>
#include<stdlib.h>
#define MAXSZ 10 

struct employee
{
	char name[20];
	int age;
	long int salary;
};


int rfile(struct employee *e);
void wfile(struct employee *e, int n);
void sort(struct employee *e, int lb, int ub);
void merge(struct employee *e, int lb1, int ub1, int lb2, int ub2);
void display(struct employee *e, int n);

int main()
{

struct employee e[MAXSZ];
int n;

n=rfile(e);
display(e,n);
sort(e,0,n-1);
display(e,n);
wfile(e,n);
return 0;

}


/// READ FILE FUNCTION 
int rfile(struct employee *e)
 {
	int i=0;
	FILE *fp=NULL;
	
	fp=fopen("emp1.txt","r");

	if(fp==NULL)
		printf("FILE COULD NOT BE READ !!\n");
	while(!feof(fp))	
	  {
		fscanf(fp,"%s%d%d",e[i].name,&e[i].age,&e[i].salary);
		i++;
	  }
	fclose(fp);
	return i-1; /// no of records read
 }


/// SORT FUNCTION

void sort(struct employee *e, int lb , int ub )
{
	int mid;
	if(lb<ub)
	{
		mid=(lb+ub)/2;
		sort(e,lb,mid);
		sort(e,mid+1,ub);
		merge(e,lb,mid,mid+1,ub);
		//printf("KKKK1\n");
	}
}

void merge(struct employee *e, int lb1, int ub1, int lb2, int ub2)
{
	int i=lb1,j=lb2,k=0;//or lb
	struct employee t[10];

	while(i<=ub1 && j<=ub2)
	{
		//printf("\n+_+\n");
		if(e[i].age<=e[j].age)
		{
			t[k]=e[i];  i++;  k++;
		}			
			
		else
		{
			t[k]=e[j];   j++;  k++;
		}		

	}

	while(i<=ub1)
	{
		t[k]=e[i];  i++;  k++;
	}

	while(j<=ub2)
	{
		t[k]=e[j];  j++;  k++;
	}


	for(i=lb1,k=0;i<=ub2;i++,k++)
	{
//	printf("b[k]=%ddisplay(e,n);\n",b[k]);		
	e[i]=t[k];
 	}
	
}

/// WRITE FILE FUNCTION
void wfile(struct employee *e, int n)
 { 
	int i=0;
	FILE *fp=NULL;
	
	fp=fopen("sortedemp1.txt","w");	

	if(fp==NULL)
	{
		printf("FILE COULD NOT BE OPENED/FOUND\n");	
		exit(1);
	}

	for(i=0;i<n;i++)
	{	 
		fprintf(fp,"%s\t%d\t%d\n",e[i].name,e[i].age,e[i].salary);
      	}
		fclose(fp);		
			
 }

// DISPLAY


void display(struct employee *e, int n)
{
	int i=0;
	for(i=1;i<n;i++)
		printf("%s\t%d\t%d\n",e[i].name,e[i].age,e[i].salary);
}
